iter_obj_initial <- apply(specs, 1, function(tuple) {
path <- file.path(root_path, tuple[1], tuple[2], tuple[3], tuple[4])
# print(path)
iter_obj <- csvStreamerGenerator(starttime, endtime, exchange, product, path, table)
return(iter_obj)
})
iter_obj_initial[sapply(iter_obj_initial, is.null)] <- NULL
# first run
iter_obj_list <<- lapply(seq_along(iter_obj_initial), function(i) {
csvStreamer(iter_obj_initial[[i]])
})
iter_obj_list
table <- "orderBook"
initialSubscriber(starttime, endtime, exchange, product, table)
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
runSubscriber()
runSubscriber()
runSubscriber()
runSubscriber()
runSubscriber()
runSubscriber()
runSubscriber()
runSubscriber()
runSubscriber()
runSubscriber()
runSubscriber()
runSubscriber()
runSubscriber()
showConnections(all = T
)
closeAllConnections(
)
runSubscriber()
initialSubscriber(starttime, endtime, exchange, product, table)
showConnections(all = T
)
runSubscriber()
showConnections(all = T
)
runSubscriber()
showConnections(all = T
)
runSubscriber()
showConnections(all = T
)
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
# Test caller
root_path <- "~/Downloads/Data"
table <- "orderBook"
exchange <- "GDAX"
product <- "BTC"
date <- "20180117"
table_list <- c("orderBook", "Trade")
path <- file.path(root_path, table, exchange, product, date)
dt <- runQuery(
starttime = "20180117T120000",
endtime = "20180119T000000",
exchange_list = c("GDAX", "ABC"),
product_list = c("BTC", "ETH"),
tablename = "orderBook"
)
dt <- runQuery(
starttime = "20180117T120000",
endtime = "20180119T000000",
exchange_list = c("GDAX", "ABC"),
product_list = c("BTC", "ETH"),
table = "orderBook"
)
require(pbapply, quitely = T, warn.conflicts = F)
require(pbapply, quitely = T, warn.conflicts = F)
require(pbapply, quietly = T, warn.conflicts = F)
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
dt <- runQuery(
starttime = "20180117T120000",
endtime = "20180119T000000",
exchange_list = c("GDAX", "ABC"),
product_list = c("BTC", "ETH"),
table = "orderBook"
)
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
dt <- runQuery(
starttime = "20180117T120000",
endtime = "20180119T000000",
exchange_list = c("GDAX", "ABC"),
product_list = c("BTC", "ETH"),
table = "orderBook"
)
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
dt <- runQuery(
starttime = "20180117T120000",
endtime = "20180119T000000",
exchange_list = c("GDAX", "ABC"),
product_list = c("BTC", "ETH"),
table = "orderBook"
)
table_list <- pblapply(all_files, function(f) fread(file.path(path, f)), cl = NULL)
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
dt <- runQuery(
starttime = "20180117T120000",
endtime = "20180119T000000",
exchange_list = c("GDAX", "ABC"),
product_list = c("BTC", "ETH"),
table = "orderBook"
)
pblapply
startpb
pblapply
splitpb
splitpb(all_files)
all_files <- fileLister(starttime, endtime, exchange, product, path, table)
splitpb(all_files)
nout <- as.integer(getOption("pboptions")$nout)
nout
length(all_files)
splitpb(144, 1, 100)
B <- length(splitpb(144, 1, 100))
B
startpb(0, 72)
dt <- runQuery(
starttime = "20180117T120000",
endtime = "20180119T000000",
exchange_list = c("GDAX", "ABC"),
product_list = c("BTC", "ETH"),
table = "orderBook"
)
dt <- runQuery(
starttime = "20180117T120000",
endtime = "20180119T000000",
exchange_list = c("GDAX", "ABC"),
product_list = c("BTC", "ETH"),
table = "orderBook"
)
min
max
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
dt <- runQuery(
starttime = "20180117T120000",
endtime = "20180119T000000",
exchange_list = c("GDAX", "ABC"),
product_list = c("BTC", "ETH"),
table = "orderBook"
)
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
initialSubscriber(starttime, endtime, exchange, product, table)
table_list <- c("orderBook", "Trade")
exchange_list <- c("GDAX", "ABC")
product_list <- c("BTC", "ETH")
initialSubscriber(starttime, endtime, exchange_list, product_list, table_list)
runSubscriber()
showConnections(all = T)
runSubscriber()
runSubscriber()
runSubscriber()
runSubscriber()
runSubscriber()
runSubscriber()
runSubscriber()
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
closeAllConnections()
initialSubscriber(starttime, endtime, exchange_list, product_list, table_list)
runSubscriber()
runSubscriber()
runSubscriber()
dt <- runSubscriber()
attr(dt, "spec")
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
c(exchange, product, table)
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
initialSubscriber(starttime, endtime, exchange_list, product_list, table_list)
stream <- runSubscriber()
stream
attr(stream, "spec")
attr(stream, "spec")
attr(stream, "spec")
for (i in 1:1000) {
stream <- runSubscriber()
spec <- attr(stream, "spec")
if (spec == "Trade") print(stream)
}
warnings()
for (i in 1:1000) {
stream <- runSubscriber()
spec <- attr(stream, "spec")
if (spec[3] == "Trade") print(stream)
}
for (i in 1:10000) {
stream <- runSubscriber()
spec <- attr(stream, "spec")
if (spec[3] == "Trade") print(stream)
}
dt <- pbsapply(1:1000, function(i) {
stream <- runSubscriber()
spec <- attr(stream, "spec")
if (spec[3] == "Trade") print(stream)
})
dt_orderBook <- runQuery(
starttime = "20180117T120000",
endtime = "20180119T000000",
exchange_list = c("GDAX", "ABC"),
product_list = c("BTC", "ETH"),
table = "orderBook"
)
dt_Trade <- runQuery(
starttime = "20180117T120000",
endtime = "20180119T000000",
exchange_list = c("GDAX", "ABC"),
product_list = c("BTC", "ETH"),
table = "Trade"
)
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
dt_Trade <- runQuery(
starttime = "20180117T120000",
endtime = "20180119T000000",
exchange_list = c("GDAX", "ABC"),
product_list = c("BTC", "ETH"),
table = "Trade"
)
table <- "Trade"
require(data.table, quietly = T, warn.conflicts = F)
require(pbapply, quietly = T, warn.conflicts = F)
all_files <- fileLister(starttime, endtime, exchange, product, path, table)
if (!is.null(all_files)) {
cat("Loading", path, "\n")
data_list <- pblapply(all_files, function(f) fread(file.path(path, f)))
return(do.call(rbind, data_list))
} else {
return(invisible(NULL))
}
able
table
all_files <- fileLister(starttime, endtime, exchange, product, path, table)
all_files
cat("Loading", path, "\n")
path <- file.path(root_path, table, exchange, product, date)
all_files <- fileLister(starttime, endtime, exchange, product, path, table)
all_files
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
dt_orderBook <- runQuery(
starttime = "20180117T120000",
endtime = "20180119T000000",
exchange_list = c("GDAX", "ABC"),
product_list = c("BTC", "ETH"),
table = "orderBook"
)
dt_Trade <- runQuery(
starttime = "20180117T120000",
endtime = "20180119T000000",
exchange_list = c("GDAX", "ABC"),
product_list = c("BTC", "ETH"),
table = "Trade"
)
dt_orderBook[1]
dt_Trade[1]
dt_orderBook$timestamp
dt_Trade$timestamp
which.min(dt_orderBook$timestamp > dt_Trade$timestampe[1])
dt_orderBook$timestamp > dt_Trade$timestampe[1]
dt_Trade$timestampe[1]
which.min(dt_orderBook$timestamp > dt_Trade$timestamp[1])
which.min(dt_orderBook$timestamp < dt_Trade$timestamp[1])
dt_orderBook$timestamp[153]
dt_orderBook$timestamp[154]
dt_Trade$timestamp[1]
initialSubscriber(starttime, endtime, exchange_list, product_list, table_list)
initialSubscriber(starttime, endtime, exchange_list, product_list, table_list)
initialSubscriber(starttime, endtime, exchange_list, product_list, table_list)
initialSubscriber(starttime, endtime, exchange_list, product_list, table_list)
table_list
product_list
exchange_list
require(iterators, quietly = T, warn.conflicts = F)
require(itertools, quietly = T, warn.conflicts = F)
startdate <- as.Date(substr(starttime, 1, 8), "%Y%m%d")
enddate <- as.Date(substr(endtime, 1, 8), "%Y%m%d")
date_list <- format(as.Date(startdate:enddate, origin = '1970-01-01'), "%Y%m%d")
specs <- expand.grid(table = table_list, exchange = exchange_list, product = product_list, date = date_list)
specs
tuple <- specs[2,]
tuple
path <- file.path(root_path, tuple[1], tuple[2], tuple[3], tuple[4])
path
tuple <- as.vector(specs[2,])
tuple
tuple <- as.character(specs[2,])
tuple
specs[2,]
i = 2
path <- file.path(root_path, specs$table[i], specs$exchange[i], specs$product[i], specs$date[i])
path
# print(path)
iter_obj <- csvStreamerGenerator(starttime, endtime, exchange, product, path, table)
iter_obj
i
csvStreamer(iter_obj_initial[[i]])
iter_obj_initial <- lapply(seq_len(nrow(specs)), function(i) {
path <- file.path(root_path, specs$table[i], specs$exchange[i], specs$product[i], specs$date[i])
# print(path)
iter_obj <- csvStreamerGenerator(starttime, endtime, exchange, product, path, table)
return(iter_obj)
})
iter_obj_initial[sapply(iter_obj_initial, is.null)] <- NULL
# first run
iter_obj_list <<- lapply(seq_along(iter_obj_initial), function(i) {
csvStreamer(iter_obj_initial[[i]])
})
i
csvStreamer(iter_obj_initial[[i]])
i = 1
csvStreamer(iter_obj_initial[[i]])
iter_obj_initial[[1]]
iter_obj_initial[[2]]
seq_along(iter_obj_initial)
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
table_list
specs <- expand.grid(table = table_list, exchange = exchange_list, product = product_list, date = date_list)
specs
iter_obj_initial <- lapply(seq_len(nrow(specs)), function(i) {
path <- file.path(root_path, specs$table[i], specs$exchange[i], specs$product[i], specs$date[i])
# print(path)
iter_obj <- csvStreamerGenerator(starttime, endtime, exchange, product, path, table)
return(iter_obj)
})
iter_obj_initial
iter_obj_initial[sapply(iter_obj_initial, is.null)] <- NULL
iter_obj_initial
?switch
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
initialSubscriber(starttime, endtime, exchange_list, product_list, table_list)
path <- file.path(root_path, table, exchange, product, date)
# print(path)
iter_obj <- csvStreamerGenerator(starttime, endtime, exchange, product, path, table)
specs <- expand.grid(table = table_list, exchange = exchange_list, product = product_list, date = date_list)
iter_obj_initial <- lapply(seq_len(nrow(specs)), function(i) {
table <- specs$table[i]
exchange <- specs$exchange[i]
product <- specs$product[i]
date <- specs$date[i]
path <- file.path(root_path, table, exchange, product, date)
# print(path)
iter_obj <- csvStreamerGenerator(starttime, endtime, exchange, product, path, table)
return(iter_obj)
})
iter_obj_initial[sapply(iter_obj_initial, is.null)] <- NULL
iter_obj_initial
table
exchange
specs$table
specs$table[1]
path
i = 1
table <- specs$table[i]
exchange <- specs$exchange[i]
product <- specs$product[i]
date <- specs$date[i]
path <- file.path(root_path, table, exchange, product, date)
path
iter_obj_initial <- lapply(seq_len(nrow(specs)), function(i) {
table <- specs$table[i]
exchange <- specs$exchange[i]
product <- specs$product[i]
date <- specs$date[i]
path <- file.path(root_path, table, exchange, product, date)
# print(path)
iter_obj <- csvStreamerGenerator(starttime, endtime, exchange, product, path, table)
return(iter_obj)
})
iter_obj_initial[sapply(iter_obj_initial, is.null)] <- NULL
iter_obj_initial
specs <- expand.grid(table = table_list, exchange = exchange_list, product = product_list, date = date_list, stringsAsFactors = F)
iter_obj_initial <- lapply(seq_len(nrow(specs)), function(i) {
table <- specs$table[i]
exchange <- specs$exchange[i]
product <- specs$product[i]
date <- specs$date[i]
path <- file.path(root_path, table, exchange, product, date)
# print(path)
iter_obj <- csvStreamerGenerator(starttime, endtime, exchange, product, path, table)
return(iter_obj)
})
iter_obj_initial
iter_obj_initial[sapply(iter_obj_initial, is.null)] <- NULL
iter_obj_initial
# first run
iter_obj_list <<- lapply(seq_along(iter_obj_initial), function(i) {
csvStreamer(iter_obj_initial[[i]])
})
i
csvStreamer(iter_obj_initial[[i]])
seq_along(iter_obj_initial)
iter_obj_list <<- lapply(seq_along(iter_obj_initial), function(i) {
csvStreamer(iter_obj_initial[[i]])
})
closeAllConnections()
iter_obj_initial <- lapply(seq_len(nrow(specs)), function(i) {
table <- specs$table[i]
exchange <- specs$exchange[i]
product <- specs$product[i]
date <- specs$date[i]
path <- file.path(root_path, table, exchange, product, date)
# print(path)
iter_obj <- csvStreamerGenerator(starttime, endtime, exchange, product, path, table)
return(iter_obj)
})
iter_obj_initial[sapply(iter_obj_initial, is.null)] <- NULL
# first run
iter_obj_list <<- lapply(seq_along(iter_obj_initial), function(i) {
csvStreamer(iter_obj_initial[[i]])
})
lapply(seq_along(iter_obj_initial), function(i) {
csvStreamer(iter_obj_initial[[i]])
})
i
i
csvStreamer(iter_obj_initial[[i]])
i = 2
csvStreamer(iter_obj_initial[[i]])
iter_obj_initial[[i]]
iter_obj_initial
iter_obj <- iter_obj_initial[[2]]
reader_it <- iter_obj$reader_it
file_it <- iter_obj$file_it
spec <- attr(iter_obj, "spec")
spec
is.null(reader_it)
is.null(reader_it) || !hasNext(reader_it)
hasNext(file_it)
file <- nextElem(file_it)
file
reader_it <- ihasNext(iread.table(file.path(path, file), header = T, row.names = NULL, sep = ","))
path
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
initialSubscriber(starttime, endtime, exchange_list, product_list, table_list)
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
source('~/Google Drive/Projects/crypto/bit-in-the-box/rcafp/R/Rcaf.r')
initialSubscriber(starttime, endtime, exchange_list, product_list, table_list)
dt_Stream <- pblapply(1:1000, function(i) {
stream <- runSubscriber()
spec <- attr(stream, "spec")
if (spec[3] == "Trade") print(stream)
return(stream)
})
dt_Stream <- pblapply(1:1000, function(i) {
stream <- runSubscriber()
spec <- attr(stream, "spec")
spec[3]
return(stream)
})
dt_Stream <- pblapply(1:1000, function(i) {
stream <- runSubscriber()
spec <- attr(stream, "spec")
print(spec[3])
return(stream)
})
print(stream$timestamp, spec[3])
stream
stream$timestamp
dt_Stream <- pblapply(1:1000, function(i) {
stream <- runSubscriber()
spec <- attr(stream, "spec")
cat(stream$timestamp, spec[3])
return(stream)
})
dt_Stream <- pblapply(1:1000, function(i) {
stream <- runSubscriber()
spec <- attr(stream, "spec")
(stream$timestamp, spec[3], "\n")
return(stream)
})
dt_Stream <- pblapply(1:1000, function(i) {
stream <- runSubscriber()
spec <- attr(stream, "spec")
cat(stream$timestamp, spec[3], "\n")
return(stream)
})
?option
getOption
getOption()
options
options()
options("digits")
getOption("digits")
options(digits = 15)
dt_Stream <- pblapply(1:1000, function(i) {
stream <- runSubscriber()
spec <- attr(stream, "spec")
cat(stream$timestamp, spec[3], "\n")
return(stream)
})
options(digits = 15)
dt_Stream <- pblapply(1:100, function(i) {
stream <- runSubscriber()
spec <- attr(stream, "spec")
cat(stream$timestamp, spec[3], "\n")
return(stream)
})
